import { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { useNavigate } from 'react-router-dom';

const HumanOrAI = () => {
  const navigate = useNavigate();
  const [gameState, setGameState] = useState('menu'); // menu, playing, coCreate, results
  const [currentRound, setCurrentRound] = useState(0);
  const [score, setScore] = useState(0);
  const [feedback, setFeedback] = useState('');
  const [showFeedback, setShowFeedback] = useState(false);
  const [userPrompt, setUserPrompt] = useState('');
  const [aiGenerated, setAiGenerated] = useState('');

  const quizData = [
    {
      type: 'poem',
      content: `√Ånh trƒÉng v·∫±ng v·∫∑c tr√™n s√¥ng Thu,
L√≤ng ng∆∞·ªùi b·ªìi h·ªìi nh·ªõ c·ªë h∆∞∆°ng.
M·ªôt m√¨nh t√¥i ng·ªìi b√™n b·ªù n∆∞·ªõc,
Nghe ti·∫øng s√≥ng v·ªó, nghe chim ca.`,
      isAI: false,
      explanation: '‚úÖ Ng∆∞·ªùi vi·∫øt - Th∆° n√†y c√≥ chi·ªÅu s√¢u c·∫£m x√∫c, h√¨nh ·∫£nh c·ª• th·ªÉ ("v·∫±ng v·∫∑c", "b·ªìi h·ªìi") v√† c·∫£m gi√°c nh·ªõ nh√† ch√¢n th·ª±c. AI th∆∞·ªùng kh√¥ng t·∫°o ra ƒë∆∞·ª£c s·ª± tinh t·∫ø n√†y.',
    },
    {
      type: 'poem',
      content: `Trong ƒë√™m t·ªëi, √°nh s√°ng chi·∫øu r·ªçi,
Con ng∆∞·ªùi c√πng nhau ti·∫øn b∆∞·ªõc ƒëi.
T∆∞∆°ng lai t∆∞∆°i s√°ng ƒëang ch·ªù ƒë·ª£i,
Ch√∫ng ta s·∫Ω ƒë·∫øn n∆°i m∆° ∆∞·ªõc.`,
      isAI: true,
      explanation: '‚ùå AI vi·∫øt - Th∆° n√†y qu√° chung chung, thi·∫øu h√¨nh ·∫£nh c·ª• th·ªÉ, v√† s·ª≠ d·ª•ng c·ª•m t·ª´ "s√°ng - t·ªëi", "t∆∞∆°ng lai t∆∞∆°i s√°ng" theo ki·ªÉu khu√¥n m·∫´u. AI hay t·∫°o ra nh·ªØng c√¢u "an to√†n" nh∆∞ng thi·∫øu c·∫£m x√∫c th·∫≠t.',
    },
    {
      type: 'painting',
      content: 'üñºÔ∏è B·ª©c tranh: C·∫£nh ho√†ng h√¥n tr√™n bi·ªÉn v·ªõi m√†u cam, t√≠m, ƒë·ªè h√≤a quy·ªán. C√≥ m·ªôt chi·∫øc thuy·ªÅn nh·ªè ·ªü gi·ªØa bi·ªÉn. √Ånh s√°ng ph·∫£n chi·∫øu tr√™n m·∫∑t n∆∞·ªõc t·∫°o v·ªát s√°ng ho√†n h·∫£o ƒë·ªëi x·ª©ng.',
      isAI: true,
      explanation: '‚ùå AI v·∫Ω - √Ånh s√°ng ph·∫£n chi·∫øu "ho√†n h·∫£o ƒë·ªëi x·ª©ng" l√† d·∫•u hi·ªáu c·ªßa AI. Ngh·ªá sƒ© ng∆∞·ªùi th∆∞·ªùng ƒë·ªÉ l·∫°i nh·ªØng ƒëi·ªÉm kh√¥ng ho√†n h·∫£o, nh∆∞ng c√≥ "linh h·ªìn". AI t·∫°o ra s·ª± ho√†n h·∫£o k·ªπ thu·∫≠t nh∆∞ng thi·∫øu c√° t√≠nh.',
    },
    {
      type: 'painting',
      content: 'üñºÔ∏è B·ª©c tranh: Ch√¢n dung m·ªôt ng∆∞·ªùi ph·ª• n·ªØ l·ªõn tu·ªïi v·ªõi n·∫øp nhƒÉn r√µ r√†ng, √°nh m·∫Øt s√¢u th·∫≥m. M·ªôt b√™n khu√¥n m·∫∑t s√°ng h∆°n, m·ªôt b√™n t·ªëi h∆°n. C√≥ v√†i n√©t v·∫Ω l·ªói nh·ªè ·ªü ph·∫ßn t√≥c nh∆∞ng khu√¥n m·∫∑t r·∫•t bi·ªÉu c·∫£m.',
      isAI: false,
      explanation: '‚úÖ Ng∆∞·ªùi v·∫Ω - "N√©t v·∫Ω l·ªói nh·ªè" v√† "bi·ªÉu c·∫£m s√¢u" l√† ƒë·∫∑c tr∆∞ng c·ªßa ngh·ªá sƒ© ng∆∞·ªùi. AI th∆∞·ªùng tr√°nh l·ªói nh∆∞ng kh√≥ t·∫°o ra c·∫£m x√∫c ph·ª©c t·∫°p. Ngh·ªá thu·∫≠t con ng∆∞·ªùi ch·∫•p nh·∫≠n kh√¥ng ho√†n h·∫£o ƒë·ªÉ ƒë·∫°t bi·ªÉu c·∫£m.',
    },
    {
      type: 'code',
      content: `function calculateSum(arr) {
  let sum = 0;
  for (let i = 0; i < arr.length; i++) {
    sum += arr[i];
  }
  return sum;
}`,
      isAI: true,
      explanation: '‚ùå AI vi·∫øt - Code n√†y qu√° "s·∫°ch" v√† theo ki·ªÉu textbook. AI th∆∞·ªùng vi·∫øt code chu·∫©n m·ª±c nh∆∞ng thi·∫øu style c√° nh√¢n. L·∫≠p tr√¨nh vi√™n ng∆∞·ªùi th∆∞·ªùng c√≥ quirks ri√™ng (v√≠ d·ª•: d√πng reduce, forEach, ho·∫∑c comment gi·∫£i th√≠ch).',
    },
    {
      type: 'code',
      content: `// TODO: fix this mess later lol
const getSum = (arr) => arr.reduce((a,b)=>a+b, 0); // idk why reduce works but it does`,
      isAI: false,
      explanation: '‚úÖ Ng∆∞·ªùi vi·∫øt - Comment "TODO", "lol", "idk" v√† style code ng·∫Øn g·ªçn (reduce) l√† ƒë·∫∑c tr∆∞ng c·ªßa con ng∆∞·ªùi. AI kh√¥ng vi·∫øt comment h√†i h∆∞·ªõc ho·∫∑c th·ª´a nh·∫≠n kh√¥ng hi·ªÉu r√µ. ƒê√¢y l√† "c√° t√≠nh" c·ªßa l·∫≠p tr√¨nh vi√™n.',
    },
    {
      type: 'music',
      content: 'üéµ ƒêo·∫°n nh·∫°c: Giai ƒëi·ªáu piano ch·∫≠m, c√°c n·ªët nh·∫°c ƒë·ªÅu ƒë·∫∑n, h·ª£p √¢m C major - Am - F - G l·∫∑p l·∫°i su·ªët b√†i. Kh√¥ng c√≥ bi·∫øn t·∫•u b·∫•t ng·ªù. Nghe nh·∫π nh√†ng nh∆∞ng h∆°i ƒë∆°n ƒëi·ªáu.',
      isAI: true,
      explanation: '‚ùå AI s√°ng t√°c - H·ª£p √¢m C-Am-F-G (4 chord) l√† pattern ph·ªï bi·∫øn nh·∫•t trong AI music. S·ª± "ƒë·ªÅu ƒë·∫∑n" v√† "thi·∫øu bi·∫øn t·∫•u" cho th·∫•y thu·∫≠t to√°n ƒëang ch∆°i an to√†n. Nh·∫°c sƒ© ng∆∞·ªùi th∆∞·ªùng th√™m b·∫•t ng·ªù, l·ªói nh·ªè, ho·∫∑c c·∫£m x√∫c ƒë·ªôt ng·ªôt.',
    },
    {
      type: 'music',
      content: 'üéµ ƒêo·∫°n nh·∫°c: Guitar acoustic v·ªõi nh·ªãp kh√¥ng ƒë·ªÅu, c√≥ ch·ªó nhanh, c√≥ ch·ªó ch·∫≠m. Xu·∫•t hi·ªán m·ªôt n·ªët "g·∫£y nh·∫ßm" nh·∫π ·ªü gi√¢y th·ª© 12 nh∆∞ng t·ªïng th·ªÉ r·∫•t c·∫£m x√∫c. C√≥ v√†i kho·∫£ng l·∫∑ng d√†i b·∫•t ng·ªù.',
      isAI: false,
      explanation: '‚úÖ Ng∆∞·ªùi ch∆°i - "Nh·ªãp kh√¥ng ƒë·ªÅu", "g·∫£y nh·∫ßm", "kho·∫£ng l·∫∑ng b·∫•t ng·ªù" l√† d·∫•u hi·ªáu c·ªßa con ng∆∞·ªùi. AI kh√¥ng "nh·∫ßm" v√† kh√¥ng t·∫°o kho·∫£ng l·∫∑ng m·ªôt c√°ch t·ª± nhi√™n. S·ª± kh√¥ng ho√†n h·∫£o n√†y t·∫°o n√™n c·∫£m gi√°c ch√¢n th·ª±c v√† g·∫ßn g≈©i.',
    },
  ];

  const startGame = () => {
    setGameState('playing');
    setCurrentRound(0);
    setScore(0);
    setShowFeedback(false);
  };

  const makeGuess = (guess) => {
    const currentItem = quizData[currentRound];
    const correct = (guess === 'ai' && currentItem.isAI) || (guess === 'human' && !currentItem.isAI);

    if (correct) {
      setScore(score + 1);
    }

    setFeedback(currentItem.explanation);
    setShowFeedback(true);

    setTimeout(() => {
      setShowFeedback(false);
      if (currentRound < quizData.length - 1) {
        setCurrentRound(currentRound + 1);
      } else {
        setGameState('coCreate');
      }
    }, 4000);
  };

  const generateAIContent = () => {
    const prompts = [
      `M·ªôt b√†i th∆° v·ªÅ "${userPrompt}":\n\n${userPrompt} l√† ƒëi·ªÅu tuy·ªát v·ªùi,\nMang l·∫°i ni·ªÅm vui cho con ng∆∞·ªùi.\nCh√∫ng ta c√πng nhau ti·∫øn v·ªÅ ph√≠a tr∆∞·ªõc,\nT∆∞∆°ng lai t∆∞∆°i s√°ng ƒëang ch·ªù ƒë√≥n.`,
      `ƒêo·∫°n m√£ v·ªÅ "${userPrompt}":\n\nfunction handle${userPrompt.replace(/\s/g, '')}() {\n  // X·ª≠ l√Ω ${userPrompt}\n  console.log("Processing ${userPrompt}");\n  return true;\n}`,
      `√ù t∆∞·ªüng tranh v·ªÅ "${userPrompt}":\n\nüñºÔ∏è M·ªôt b·ª©c tranh v·ªõi m√†u s·∫Øc r·ª±c r·ª° th·ªÉ hi·ªán ${userPrompt}. Composition c√¢n ƒë·ªëi, √°nh s√°ng ho√†n h·∫£o, kh√¥ng c√≥ l·ªói k·ªπ thu·∫≠t. Tr√¥ng ƒë·∫πp nh∆∞ng h∆°i gi·ªëng stock image.`,
    ];

    setAiGenerated(prompts[Math.floor(Math.random() * prompts.length)]);
  };

  const getMarxCommentary = () => {
    const percentage = ((score / quizData.length) * 100).toFixed(0);

    if (percentage >= 80) {
      return {
        title: 'üéì B·∫≠c Th·∫ßy Ph√¢n Bi·ªát',
        comment: '"Lao ƒë·ªông c√≥ √Ω th·ª©c l√† b·∫£n ch·∫•t con ng∆∞·ªùi." - B·∫°n hi·ªÉu r√µ s·ª± kh√°c bi·ªát gi·ªØa s√°ng t·∫°o c√≥ √Ω th·ª©c (con ng∆∞·ªùi) v√† x·ª≠ l√Ω thu·∫≠t to√°n (AI). AI kh√¥ng c√≥ √Ω th·ª©c, ch·ªâ l√† c√¥ng c·ª•.',
      };
    }
    if (percentage >= 50) {
      return {
        title: 'ü§î Ng∆∞·ªùi H·ªçc H·ªèi',
        comment: '"Trong th·∫ø gi·ªõi t∆∞ b·∫£n, AI ƒë∆∞·ª£c d√πng ƒë·ªÉ thay th·∫ø lao ƒë·ªông s√°ng t·∫°o v√† h·∫° gi√° tr·ªã c·ªßa n√≥." - B·∫°n ƒëang h·ªçc c√°ch ph√¢n bi·ªát. AI ng√†y c√†ng "gi·ªëng ng∆∞·ªùi" nh∆∞ng thi·∫øu c·∫£m x√∫c v√† √Ω th·ª©c th·∫≠t s·ª±.',
      };
    }
    return {
      title: 'üòµ B·ªã AI ƒê√°nh L·ª´a',
      comment: '"AI l√† c√¥ng c·ª• c·ªßa t∆∞ b·∫£n ƒë·ªÉ t·ª± ƒë·ªông h√≥a v√† ki·ªÉm so√°t lao ƒë·ªông." - B·∫°n kh√≥ ph√¢n bi·ªát AI v√† ng∆∞·ªùi. ƒê√¢y l√† m·ª•c ti√™u c·ªßa t∆∞ b·∫£n: l√†m cho AI thay th·∫ø lao ƒë·ªông s√°ng t·∫°o v·ªõi chi ph√≠ th·∫•p h∆°n.',
    };
  };

  // Menu Screen
  if (gameState === 'menu') {
    return (
      <div className="min-h-screen bg-gradient-to-br from-black via-revolutionary-gold/20 to-neural-green/20 flex items-center justify-center p-4">
        <motion.div
          initial={{ scale: 0.9, opacity: 0 }}
          animate={{ scale: 1, opacity: 1 }}
          className="max-w-2xl w-full"
        >
          <div className="text-center mb-8">
            <motion.div
              animate={{ rotate: [0, 10, -10, 0] }}
              transition={{ repeat: Infinity, duration: 2 }}
              className="text-7xl mb-4"
            >
              üß†
            </motion.div>
            <h1 className="text-5xl md:text-6xl font-bold text-cream-white mb-3">
              Con Ng∆∞·ªùi hay AI?
            </h1>
            <p className="text-revolutionary-gold text-xl mb-2">
              The Creative Turing Test
            </p>
            <p className="text-cyber-blue text-sm">
              üé® Ph√¢n Bi·ªát S√°ng T·∫°o Th·∫≠t & Gi·∫£ ü§ñ
            </p>
          </div>

          <div className="bg-black/70 backdrop-blur-xl rounded-2xl p-6 mb-6 border-2 border-revolutionary-gold/50">
            <h3 className="text-revolutionary-gold font-bold text-lg mb-4 text-center">
              üéÆ C√°ch Ch∆°i
            </h3>
            <div className="text-cream-white/90 space-y-3 text-sm">
              <p>
                <strong className="text-cyber-blue">üìù 8 t√°c ph·∫©m:</strong> Th∆°,
                tranh, code, nh·∫°c - AI ho·∫∑c ng∆∞·ªùi t·∫°o ra
              </p>
              <p>
                <strong className="text-neural-green">ü§î Nhi·ªám v·ª•:</strong> ƒêo√°n
                xem m·ªói t√°c ph·∫©m do AI hay con ng∆∞·ªùi s√°ng t·∫°o
              </p>
              <p>
                <strong className="text-revolutionary-gold">üí° G·ª£i √Ω:</strong> AI
                th∆∞·ªùng "ho√†n h·∫£o" nh∆∞ng thi·∫øu c·∫£m x√∫c. Con ng∆∞·ªùi c√≥ l·ªói nh∆∞ng c√≥
                linh h·ªìn.
              </p>
              <p>
                <strong className="text-communist-red">üé® Round ƒë·∫∑c bi·ªát:</strong>{' '}
                T·∫°o t√°c ph·∫©m c√πng AI v√† so s√°nh v·ªõi con ng∆∞·ªùi!
              </p>
            </div>
          </div>

          <motion.button
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            onClick={startGame}
            className="w-full bg-gradient-to-r from-revolutionary-gold to-neural-green text-black font-bold py-4 rounded-xl text-xl shadow-2xl mb-3"
          >
            B·∫Øt ƒê·∫ßu Tr·∫Øc Nghi·ªám ‚Üí
          </motion.button>

          <button
            onClick={() => navigate('/game')}
            className="w-full bg-steel-gray/30 hover:bg-steel-gray/50 text-cream-white py-3 rounded-xl transition-all"
          >
            ‚Üê Quay V·ªÅ Game Hub
          </button>
        </motion.div>
      </div>
    );
  }

  // Co-Create Screen
  if (gameState === 'coCreate') {
    return (
      <div className="min-h-screen bg-gradient-to-br from-black via-cyber-blue/20 to-revolutionary-gold/20 flex items-center justify-center p-4">
        <motion.div
          initial={{ scale: 0.9, opacity: 0 }}
          animate={{ scale: 1, opacity: 1 }}
          className="max-w-3xl w-full"
        >
          <div className="bg-black/80 backdrop-blur-xl rounded-3xl p-8 border-2 border-revolutionary-gold">
            <div className="text-center mb-6">
              <div className="text-6xl mb-4">ü§ù</div>
              <h2 className="text-4xl font-bold text-cream-white mb-2">
                Round ƒê·∫∑c Bi·ªát: C√πng AI S√°ng T·∫°o
              </h2>
              <p className="text-revolutionary-gold">
                Nh·∫≠p m·ªôt ch·ªß ƒë·ªÅ, AI s·∫Ω t·∫°o t√°c ph·∫©m cho b·∫°n xem
              </p>
            </div>

            <div className="mb-6">
              <label className="text-cream-white font-semibold block mb-2">
                Ch·ªß ƒë·ªÅ c·ªßa b·∫°n:
              </label>
              <input
                type="text"
                value={userPrompt}
                onChange={(e) => setUserPrompt(e.target.value)}
                placeholder="VD: m√πa thu, t√¨nh y√™u, c√¥ng ngh·ªá..."
                className="w-full bg-steel-gray/30 text-cream-white rounded-xl px-4 py-3 border-2 border-steel-gray/50 focus:border-revolutionary-gold outline-none"
              />
            </div>

            <button
              onClick={generateAIContent}
              disabled={!userPrompt.trim()}
              className="w-full bg-cyber-blue/80 hover:bg-cyber-blue disabled:opacity-50 text-cream-white font-bold py-3 rounded-xl mb-6 transition-all"
            >
              ü§ñ T·∫°o B·∫±ng AI
            </button>

            {aiGenerated && (
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                className="bg-steel-gray/20 rounded-xl p-6 mb-6 border-2 border-cyber-blue/50"
              >
                <h3 className="text-cyber-blue font-bold mb-3">
                  K·∫øt qu·∫£ t·ª´ AI:
                </h3>
                <p className="text-cream-white whitespace-pre-line text-sm leading-relaxed">
                  {aiGenerated}
                </p>
              </motion.div>
            )}

            <div className="bg-communist-red/20 rounded-xl p-5 mb-6 border-2 border-revolutionary-gold/50">
              <p className="text-cream-white text-sm italic">
                <strong className="text-revolutionary-gold">
                  üí° Nh·∫≠n x√©t:
                </strong>{' '}
                AI t·∫°o ra k·∫øt qu·∫£ nhanh v√† "·ªïn" nh∆∞ng th∆∞·ªùng thi·∫øu chi·ªÅu s√¢u,
                c·∫£m x√∫c, v√† c√° t√≠nh. Con ng∆∞·ªùi s√°ng t·∫°o ch·∫≠m h∆°n nh∆∞ng c√≥ linh
                h·ªìn v√† √Ω nghƒ©a th·∫≠t s·ª±.
              </p>
            </div>

            <button
              onClick={() => setGameState('results')}
              className="w-full bg-gradient-to-r from-revolutionary-gold to-neural-green text-black font-bold py-4 rounded-xl"
            >
              Xem K·∫øt Qu·∫£ ‚Üí
            </button>
          </div>
        </motion.div>
      </div>
    );
  }

  // Results Screen
  if (gameState === 'results') {
    const result = getMarxCommentary();

    return (
      <div className="min-h-screen bg-gradient-to-br from-black via-communist-red/30 to-revolutionary-gold/20 flex items-center justify-center p-4">
        <motion.div
          initial={{ scale: 0.8, opacity: 0 }}
          animate={{ scale: 1, opacity: 1 }}
          className="max-w-2xl w-full"
        >
          <div className="bg-black/80 backdrop-blur-xl rounded-3xl p-8 border-2 border-revolutionary-gold">
            <div className="text-center mb-6">
              <div className="text-6xl mb-4">
                {score >= 6 ? 'üèÜ' : score >= 4 ? 'üëç' : 'üòÖ'}
              </div>
              <h2 className="text-4xl font-bold text-cream-white mb-4">
                {result.title}
              </h2>
              <div className="text-revolutionary-gold text-2xl font-bold mb-2">
                ƒêi·ªÉm: {score}/{quizData.length}
              </div>
              <p className="text-cream-white/80">
                T·ª∑ l·ªá ch√≠nh x√°c:{' '}
                {((score / quizData.length) * 100).toFixed(0)}%
              </p>
            </div>

            <div className="bg-communist-red/30 rounded-2xl p-6 mb-6 border-2 border-revolutionary-gold">
              <div className="flex items-start gap-4">
                <div className="text-5xl">üßî</div>
                <div>
                  <h3 className="text-revolutionary-gold font-bold text-lg mb-2">
                    Ph√¢n T√≠ch C·ªßa Marx:
                  </h3>
                  <p className="text-cream-white italic leading-relaxed">
                    {result.comment}
                  </p>
                </div>
              </div>
            </div>

            <div className="bg-steel-gray/20 rounded-xl p-5 mb-6 border border-steel-gray/50">
              <h3 className="text-cyber-blue font-bold mb-3">
                üí° ƒêi·ªÅu Quan Tr·ªçng:
              </h3>
              <p className="text-cream-white/90 text-sm leading-relaxed">
                AI kh√¥ng "s√°ng t·∫°o" theo nghƒ©a con ng∆∞·ªùi - n√≥ ch·ªâ t·ªï h·ª£p l·∫°i d·ªØ
                li·ªáu ƒë√£ h·ªçc. <strong className="text-revolutionary-gold">Lao
                ƒë·ªông s√°ng t·∫°o c√≥ √Ω th·ª©c</strong> l√† ƒë·∫∑c tr∆∞ng c·ªßa con ng∆∞·ªùi
                (theo Marx). Khi t∆∞ b·∫£n d√πng AI thay th·∫ø ngh·ªá sƒ©, nh·∫°c sƒ©, h·ªça
                sƒ© ‚Üí h·ªç ƒëang <strong className="text-communist-red">h·∫° gi√° tr·ªã
                lao ƒë·ªông s√°ng t·∫°o</strong> v√† bi·∫øn n√≥ th√†nh h√†ng h√≥a r·∫ª ti·ªÅn.
              </p>
            </div>

            <div className="flex gap-4">
              <button
                onClick={startGame}
                className="flex-1 bg-gradient-to-r from-revolutionary-gold to-neural-green text-black font-bold py-4 rounded-xl"
              >
                üîÑ Ch∆°i L·∫°i
              </button>
              <button
                onClick={() => navigate('/game')}
                className="flex-1 bg-steel-gray/50 hover:bg-steel-gray/70 text-cream-white font-semibold py-4 rounded-xl"
              >
                ‚Üê Game Hub
              </button>
            </div>
          </div>
        </motion.div>
      </div>
    );
  }

  // Playing Screen
  const currentItem = quizData[currentRound];

  return (
    <div className="min-h-screen bg-gradient-to-br from-black via-steel-gray/20 to-cyber-blue/20 flex items-center justify-center p-4">
      <div className="max-w-3xl w-full">
        {/* HUD */}
        <div className="flex justify-between items-center mb-6">
          <div className="flex gap-3">
            <div className="bg-black/60 backdrop-blur-xl rounded-xl px-4 py-2 border-2 border-revolutionary-gold/50">
              <div className="text-revolutionary-gold text-xs">C√¢u</div>
              <div className="text-cream-white text-xl font-bold">
                {currentRound + 1}/{quizData.length}
              </div>
            </div>
            <div className="bg-black/60 backdrop-blur-xl rounded-xl px-4 py-2 border-2 border-neural-green/50">
              <div className="text-neural-green text-xs">ƒê√∫ng</div>
              <div className="text-cream-white text-xl font-bold">{score}</div>
            </div>
          </div>
        </div>

        {/* Content Card */}
        <AnimatePresence mode="wait">
          <motion.div
            key={currentRound}
            initial={{ x: 300, opacity: 0 }}
            animate={{ x: 0, opacity: 1 }}
            exit={{ x: -300, opacity: 0 }}
            className="bg-black/80 backdrop-blur-xl rounded-3xl p-8 border-2 border-revolutionary-gold mb-6"
          >
            <div className="mb-6">
              <div className="inline-block bg-cyber-blue/20 text-cyber-blue px-4 py-2 rounded-full text-sm font-bold mb-4 border border-cyber-blue/50">
                {currentItem.type === 'poem' && 'üìù Th∆°'}
                {currentItem.type === 'painting' && 'üñºÔ∏è Tranh'}
                {currentItem.type === 'code' && 'üíª Code'}
                {currentItem.type === 'music' && 'üéµ Nh·∫°c'}
              </div>

              <div className="bg-steel-gray/20 rounded-xl p-6 border-2 border-steel-gray/50">
                <p className="text-cream-white text-lg leading-relaxed whitespace-pre-line">
                  {currentItem.content}
                </p>
              </div>
            </div>

            {!showFeedback && (
              <div className="flex gap-4">
                <motion.button
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                  onClick={() => makeGuess('human')}
                  className="flex-1 bg-gradient-to-br from-neural-green to-cyber-blue text-cream-white font-bold py-6 rounded-xl text-xl border-2 border-neural-green/50 hover:border-cream-white transition-all"
                >
                  üë® Con Ng∆∞·ªùi
                </motion.button>
                <motion.button
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                  onClick={() => makeGuess('ai')}
                  className="flex-1 bg-gradient-to-br from-communist-red to-revolutionary-gold text-cream-white font-bold py-6 rounded-xl text-xl border-2 border-communist-red/50 hover:border-cream-white transition-all"
                >
                  ü§ñ AI
                </motion.button>
              </div>
            )}

            {showFeedback && (
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                className="bg-revolutionary-gold/20 rounded-xl p-6 border-2 border-revolutionary-gold"
              >
                <h3 className="text-revolutionary-gold font-bold text-lg mb-3">
                  üìñ Gi·∫£i Th√≠ch:
                </h3>
                <p className="text-cream-white leading-relaxed">{feedback}</p>
              </motion.div>
            )}
          </motion.div>
        </AnimatePresence>

        <button
          onClick={() => {
            setGameState('menu');
            setCurrentRound(0);
            setScore(0);
          }}
          className="w-full bg-steel-gray/30 hover:bg-steel-gray/50 text-cream-white py-3 rounded-xl font-semibold"
        >
          ‚Üê Tho√°t V·ªÅ Menu
        </button>
      </div>
    </div>
  );
};

export default HumanOrAI;
