import React, { useState } from "react";
import { motion, AnimatePresence } from "framer-motion";
import Confetti from "react-confetti";

const Game1_Contradiction = () => {
  const [currentLevel, setCurrentLevel] = useState(0);
  const [score, setScore] = useState(0);
  const [showResult, setShowResult] = useState(false);
  const [resultMessage, setResultMessage] = useState("");
  const [showConfetti, setShowConfetti] = useState(false);
  const [gameCompleted, setGameCompleted] = useState(false);

  const levels = [
    {
      era: "X√£ H·ªôi Phong Ki·∫øn",
      year: "1000 CE",
      description: "Robot AI t·ª´ t∆∞∆°ng lai xu·∫•t hi·ªán v·ªõi kh·∫£ nƒÉng tƒÉng nƒÉng su·∫•t g·∫•p 10 l·∫ßn!",
      image: "/images2/Triet1.png",
      choices: [
        {
          id: "A",
          text: "Gi·ªØ nguy√™n ch·∫ø ƒë·ªô ƒë·ªãa ch·ªß - n√¥ng n√¥, AI tƒÉng thu t√¥ cho ƒë·ªãa ch·ªß",
          result: "fail",
          message: "‚ùå M√¢u thu·∫´n b√πng n·ªï! N√¥ng d√¢n n·ªïi d·∫≠y l·∫≠t ƒë·ªï ƒë·ªãa ch·ªß. Quan h·ªá s·∫£n xu·∫•t c≈© kh√¥ng th·ªÉ ch·ª©a ƒë·ª±ng l·ª±c l∆∞·ª£ng s·∫£n xu·∫•t m·ªõi!",
          marxQuote: '"Khi quan h·ªá c≈© tr·ªü th√†nh xi·ªÅng x√≠ch, x√£ h·ªôi bu·ªôc ph·∫£i v√πng l√™n" - Karl Marx'
        },
        {
          id: "B",
          text: "X√≥a b·ªè n√¥ng n√¥, thu√™ c√¥ng nh√¢n t·ª± do v·∫≠n h√†nh AI",
          result: "partial",
          message: "‚ö†Ô∏è X√£ h·ªôi chuy·ªÉn sang t∆∞ b·∫£n s∆° k·ª≥. ·ªîn ƒë·ªãnh t·∫°m th·ªùi nh∆∞ng m√¢u thu·∫´n m·ªõi ƒëang h√¨nh th√†nh...",
          marxQuote: '"T∆∞ b·∫£n l√† b∆∞·ªõc ti·∫øn nh∆∞ng c≈©ng ch·ª©a ƒë·ª±ng m√¢u thu·∫´n ri√™ng"'
        },
        {
          id: "C",
          text: "H·ª£p t√°c x√£: N√¥ng d√¢n c√πng s·ªü h·ªØu AI v√† ru·ªông ƒë·∫•t",
          result: "success",
          message: "‚úÖ Ho√†n h·∫£o! Quan h·ªá s·∫£n xu·∫•t ti·∫øn b·ªô ph√π h·ª£p v·ªõi LLSX m·ªõi. M·ªçi ng∆∞·ªùi c√πng h∆∞·ªüng l·ª£i!",
          marxQuote: '"S·∫£n xu·∫•t v√¨ con ng∆∞·ªùi, kh√¥ng v√¨ l·ª£i nhu·∫≠n" - Marx'
        }
      ]
    },
    {
      era: "C√°ch M·∫°ng C√¥ng Nghi·ªáp",
      year: "1850 CE",
      description: "AI qu·∫£n l√Ω nh√† m√°y hi·ªán ƒë·∫°i xu·∫•t hi·ªán, nƒÉng su·∫•t tƒÉng v·ªçt!",
      image: "/images2/Triet3.png",
      choices: [
        {
          id: "A",
          text: "T∆∞ b·∫£n t∆∞ nh√¢n s·ªü h·ªØu ho√†n to√†n AI v√† m√°y m√≥c",
          result: "fail",
          message: "‚ùå B·∫•t b√¨nh ƒë·∫≥ng tƒÉng cao! C√¥ng nh√¢n ƒë√¨nh c√¥ng quy m√¥ l·ªõn. H·ªá th·ªëng s·ª•p ƒë·ªï!",
          marxQuote: '"T∆∞ b·∫£n t√≠ch t·ª• ·ªü m·ªôt c·ª±c, ngh√®o kh·ªï t√≠ch t·ª• ·ªü c·ª±c ƒë·ªëi l·∫≠p"'
        },
        {
          id: "B",
          text: "Nh√† n∆∞·ªõc ƒëi·ªÅu ti·∫øt, ƒë·∫£m b·∫£o ph√∫c l·ª£i c√¥ng nh√¢n",
          result: "partial",
          message: "‚ö†Ô∏è T·∫°m ·ªïn! Nh∆∞ng cƒÉn b·∫£n m√¢u thu·∫´n v·∫´n ch∆∞a ƒë∆∞·ª£c gi·∫£i quy·∫øt.",
          marxQuote: '"C·∫£i c√°ch ch·ªâ l√† t·∫°m th·ªùi, c·∫ßn thay ƒë·ªïi cƒÉn b·∫£n"'
        },
        {
          id: "C",
          text: "S·ªü h·ªØu t·∫≠p th·ªÉ ph∆∞∆°ng ti·ªán s·∫£n xu·∫•t, AI ph·ª•c v·ª• c·ªông ƒë·ªìng",
          result: "success",
          message: "‚úÖ Xu·∫•t s·∫Øc! AI ph·ª•c v·ª• to√†n x√£ h·ªôi, kh√¥ng c√≤n b√≥c l·ªôt!",
          marxQuote: '"T·ª´ m·ªói ng∆∞·ªùi theo nƒÉng l·ª±c, cho m·ªói ng∆∞·ªùi theo nhu c·∫ßu"'
        }
      ]
    },
    {
      era: "K·ª∑ Nguy√™n S·ªë Hi·ªán ƒê·∫°i",
      year: "2025 CE",
      description: "AI sinh t·∫°o v√† t·ª± ƒë·ªông h√≥a thay th·∫ø h√†ng tri·ªáu vi·ªác l√†m!",
      image: "/images2/Triet5.png",
      choices: [
        {
          id: "A",
          text: "Big Tech ƒë·ªôc quy·ªÅn AI, t·ªëi ƒëa h√≥a l·ª£i nhu·∫≠n c·ªï ƒë√¥ng",
          result: "fail",
          message: "‚ùå Th·∫•t nghi·ªáp tr√†n lan! B·∫•t ·ªïn x√£ h·ªôi c·ª±c ƒëi·ªÉm. H·ªá th·ªëng s·ª•p ƒë·ªï!",
          marxQuote: '"C√¥ng ngh·ªá trong tay thi·ªÉu s·ªë tr·ªü th√†nh c√¥ng c·ª• √°p b·ª©c"'
        },
        {
          id: "B",
          text: "Thu thu·∫ø AI, tƒÉng ph√∫c l·ª£i x√£ h·ªôi (UBI)",
          result: "partial",
          message: "‚ö†Ô∏è Gi·∫£m b·ªõt m√¢u thu·∫´n nh∆∞ng ch∆∞a gi·∫£i quy·∫øt g·ªëc r·ªÖ v·∫•n ƒë·ªÅ quy·ªÅn l·ª±c.",
          marxQuote: '"Ph√∫c l·ª£i kh√¥ng thay th·∫ø ƒë∆∞·ª£c quy·ªÅn s·ªü h·ªØu"'
        },
        {
          id: "C",
          text: "AI l√† t√†i s·∫£n c√¥ng, do c·ªông ƒë·ªìng d√¢n ch·ªß qu·∫£n l√Ω",
          result: "success",
          message: "‚úÖ Ho√†n h·∫£o! AI 4.0 ph·ª•c v·ª• nh√¢n d√¢n, x√£ h·ªôi c√¥ng b·∫±ng v√† th·ªãnh v∆∞·ª£ng!",
          marxQuote: '"C√¥ng ngh·ªá gi·∫£i ph√≥ng con ng∆∞·ªùi kh·ªèi lao ƒë·ªông n·∫∑ng nh·ªçc"'
        }
      ]
    }
  ];

  const handleChoice = (choice) => {
    setResultMessage(choice.message);
    setShowResult(true);

    if (choice.result === "success") {
      setScore(score + 100);
      setShowConfetti(true);
      setTimeout(() => setShowConfetti(false), 3000);
    } else if (choice.result === "partial") {
      setScore(score + 50);
    }

    setTimeout(() => {
      setShowResult(false);
      if (currentLevel < levels.length - 1) {
        setCurrentLevel(currentLevel + 1);
      } else {
        setGameCompleted(true);
      }
    }, 4000);
  };

  const resetGame = () => {
    setCurrentLevel(0);
    setScore(0);
    setGameCompleted(false);
    setShowResult(false);
  };

  if (gameCompleted) {
    return (
      <motion.div
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        className="text-center py-8"
      >
        {showConfetti && <Confetti />}
        <h2 className="text-4xl font-bold text-neural-green mb-4">
          üéâ Ho√†n Th√†nh Game!
        </h2>
        <p className="text-2xl text-cyber-blue mb-4">ƒêi·ªÉm s·ªë: {score}/300</p>
        <div className="bg-revolutionary-gold/10 border border-revolutionary-gold/30 rounded-xl p-6 max-w-2xl mx-auto mb-6">
          <p className="text-cream-white/90 text-lg leading-relaxed">
            {score >= 250 ? "üåü Xu·∫•t s·∫Øc! B·∫°n ƒë√£ hi·ªÉu r√µ quy lu·∫≠t ph√°t tri·ªÉn LLSX-QHSX!" 
              : score >= 150 ? "üëç T·ªët! B·∫°n ƒë√£ n·∫Øm ƒë∆∞·ª£c c∆° b·∫£n v·ªÅ m√¢u thu·∫´n x√£ h·ªôi."
              : "üìö H√£y th·ª≠ l·∫°i ƒë·ªÉ hi·ªÉu s√¢u h∆°n v·ªÅ l√Ω thuy·∫øt M√°c!"}
          </p>
        </div>
        <motion.button
          whileHover={{ scale: 1.05 }}
          whileTap={{ scale: 0.95 }}
          onClick={resetGame}
          className="bg-cyber-blue text-black px-8 py-3 rounded-lg font-bold hover:bg-cyber-blue/80"
        >
          Ch∆°i L·∫°i
        </motion.button>
      </motion.div>
    );
  }

  const level = levels[currentLevel];

  return (
    <div className="max-w-4xl mx-auto">
      {showConfetti && <Confetti recycle={false} numberOfPieces={200} />}
      
      {/* Progress Bar */}
      <div className="mb-6">
        <div className="flex justify-between items-center mb-2">
          <span className="text-sm text-cream-white/60">Ti·∫øn ƒë·ªô</span>
          <span className="text-sm text-cyber-blue font-bold">ƒêi·ªÉm: {score}</span>
        </div>
        <div className="w-full bg-steel-gray/30 rounded-full h-2">
          <motion.div
            initial={{ width: 0 }}
            animate={{ width: `${((currentLevel + 1) / levels.length) * 100}%` }}
            className="bg-gradient-to-r from-cyber-blue to-neural-green h-2 rounded-full"
          />
        </div>
        <div className="text-xs text-cream-white/60 mt-1">
          M√†n {currentLevel + 1}/{levels.length}
        </div>
      </div>

      {/* Level Content */}
      <AnimatePresence mode="wait">
        {!showResult ? (
          <motion.div
            key={currentLevel}
            initial={{ opacity: 0, x: 100 }}
            animate={{ opacity: 1, x: 0 }}
            exit={{ opacity: 0, x: -100 }}
            transition={{ duration: 0.5 }}
          >
            {/* Era Header */}
            <div className="bg-gradient-to-r from-revolutionary-gold/20 to-cyber-blue/20 rounded-xl p-6 mb-6 border border-revolutionary-gold/30">
              <h3 className="text-3xl font-bold text-revolutionary-gold mb-2">
                {level.era}
              </h3>
              <p className="text-sm text-cream-white/60">{level.year}</p>
            </div>

            {/* Scenario */}
            <div className="bg-black/40 rounded-xl p-6 mb-6 border border-cyber-blue/20">
              <div className="mb-4">
                <img
                  src={level.image}
                  alt={level.era}
                  className="w-full h-48 object-cover rounded-lg"
                />
              </div>
              <p className="text-lg text-cream-white/90 leading-relaxed">
                {level.description}
              </p>
            </div>

            {/* Mentor Marx Guide */}
            <div className="bg-neural-green/10 border border-neural-green/30 rounded-xl p-4 mb-6 flex items-start gap-3">
              <div className="text-3xl">üßô‚Äç‚ôÇÔ∏è</div>
              <div>
                <p className="text-sm font-bold text-neural-green mb-1">Mentor M√°c:</p>
                <p className="text-sm text-cream-white/80 italic">
                  "L·ª±c l∆∞·ª£ng s·∫£n xu·∫•t m·ªõi ƒë√≤i h·ªèi quan h·ªá s·∫£n xu·∫•t m·ªõi ph√π h·ª£p..."
                </p>
              </div>
            </div>

            {/* Choices */}
            <div className="space-y-4">
              {level.choices.map((choice, index) => (
                <motion.button
                  key={choice.id}
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: index * 0.1 }}
                  whileHover={{ scale: 1.02, x: 10 }}
                  whileTap={{ scale: 0.98 }}
                  onClick={() => handleChoice(choice)}
                  className="w-full text-left bg-steel-gray/20 hover:bg-steel-gray/40 border border-cyber-blue/30 hover:border-cyber-blue rounded-xl p-4 transition-all group"
                >
                  <div className="flex items-start gap-3">
                    <span className="text-2xl font-bold text-cyber-blue group-hover:text-revolutionary-gold transition-colors">
                      {choice.id}
                    </span>
                    <p className="text-cream-white/90 flex-1">{choice.text}</p>
                  </div>
                </motion.button>
              ))}
            </div>
          </motion.div>
        ) : (
          <motion.div
            key="result"
            initial={{ opacity: 0, scale: 0.8 }}
            animate={{ opacity: 1, scale: 1 }}
            exit={{ opacity: 0, scale: 0.8 }}
            className="text-center py-12"
          >
            <motion.div
              animate={{ rotate: [0, 10, -10, 0] }}
              transition={{ repeat: 3, duration: 0.5 }}
              className="text-8xl mb-6"
            >
              {resultMessage.includes("‚úÖ") ? "üéâ" : resultMessage.includes("‚ö†Ô∏è") ? "‚ö†Ô∏è" : "üí•"}
            </motion.div>
            <div className="bg-black/60 border-2 border-cyber-blue rounded-2xl p-8 max-w-2xl mx-auto">
              <p className="text-2xl text-cream-white mb-6 leading-relaxed">
                {resultMessage}
              </p>
              <div className="bg-revolutionary-gold/10 border border-revolutionary-gold/30 rounded-lg p-4">
                <p className="text-revolutionary-gold italic">
                  {levels[currentLevel].choices.find(c => c.message === resultMessage)?.marxQuote}
                </p>
              </div>
            </div>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
};

export default Game1_Contradiction;
