import React, { useState } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { GoogleGenerativeAI } from "@google/generative-ai";
import Confetti from "react-confetti";

const genAI = new GoogleGenerativeAI(import.meta.env.VITE_API_KEY);

const Game4_CreativityTest = () => {
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [score, setScore] = useState(0);
  const [showResult, setShowResult] = useState(false);
  const [gameComplete, setGameComplete] = useState(false);
  const [loading, setLoading] = useState(false);
  const [aiGeneratedContents, setAiGeneratedContents] = useState([]); // Store AI-generated content for each question
  const [aiPositions, setAiPositions] = useState([]); // Track which side is AI for each question

  // Pre-made questions - Ch·ªâ c√≥ c√¢u g·ªëc c·ªßa con ng∆∞·ªùi, AI s·∫Ω generate c√¢u t∆∞∆°ng t·ª±
  const questions = [
    {
      type: "poem",
      humanContent: "M√πa thu v·ªÅ tr√™n ph·ªë c≈©\nL√° v√†ng r∆°i nh·∫π b√™n song\nNh·ªõ ng∆∞·ªùi x∆∞a m·ªói chi·ªÅu m∆∞a\nTr√°i tim n√†y v·∫´n mong manh",
      category: "Th∆°",
      aiPrompt: "Vi·∫øt m·ªôt b√†i th∆° 4 c√¢u v·ªÅ m√πa thu v√† n·ªói nh·ªõ, phong c√°ch ƒë∆°n gi·∫£n v√† tr·ª±c ti·∫øp. Ch·ªâ tr·∫£ v·ªÅ n·ªôi dung th∆°, kh√¥ng gi·∫£i th√≠ch."
    },
    {
      type: "story",
      humanContent: "C√¥ g√°i nh·ªè b∆∞·ªõc v√†o ti·ªám c√† ph√™, √°nh m·∫Øt l·∫°c l√µng t√¨m ki·∫øm m·ªôt g√≥c y√™n tƒ©nh. Tay c·∫ßm cu·ªën s√°ch c≈©, trang gi·∫•y ƒë√£ ·ªë v√†ng theo nƒÉm th√°ng. Ngo√†i kia, m∆∞a v·∫´n r∆°i.",
      category: "VƒÉn xu√¥i",
      aiPrompt: "Vi·∫øt m·ªôt ƒëo·∫°n vƒÉn ng·∫Øn 3-4 c√¢u v·ªÅ m·ªôt c√¥ g√°i trong qu√°n c√† ph√™ ƒëang ƒë·ªçc s√°ch v√†o ng√†y m∆∞a. VƒÉn phong ƒë∆°n gi·∫£n, c√¢u ng·∫Øn. Ch·ªâ tr·∫£ v·ªÅ n·ªôi dung vƒÉn, kh√¥ng gi·∫£i th√≠ch."
    },
    {
      type: "code",
      humanContent: "// Fibonacci v·ªõi ƒë·ªá quy v√† memoization\nconst fib = (n, memo = {}) => {\n  if (n in memo) return memo[n];\n  if (n <= 2) return 1;\n  memo[n] = fib(n-1, memo) + fib(n-2, memo);\n  return memo[n];\n};",
      category: "L·∫≠p tr√¨nh",
      aiPrompt: "Vi·∫øt m·ªôt h√†m JavaScript t√≠nh s·ªë Fibonacci theo c√°ch ƒë∆°n gi·∫£n nh·∫•t (ƒë·ªá quy thu·∫ßn). Ch·ªâ tr·∫£ v·ªÅ code, kh√¥ng gi·∫£i th√≠ch, kh√¥ng comment."
    },
    {
      type: "philosophy",
      humanContent: "Con ng∆∞·ªùi kh√¥ng ch·ªâ s·ªëng ƒë·ªÉ t·ªìn t·∫°i, m√† s·ªëng ƒë·ªÉ t√¨m ki·∫øm √Ω nghƒ©a. Ch√∫ng ta l√† nh·ªØng sinh v·∫≠t duy nh·∫•t c√≥ kh·∫£ nƒÉng suy ng·∫´m v·ªÅ s·ª± v√¥ nghƒ©a v√† t·ª´ ƒë√≥ t·∫°o ra √Ω nghƒ©a ri√™ng.",
      category: "Tri·∫øt l√Ω",
      aiPrompt: "Vi·∫øt 2-3 c√¢u v·ªÅ √Ω nghƒ©a cu·ªôc s·ªëng con ng∆∞·ªùi theo phong c√°ch ƒë∆°n gi·∫£n, r√µ r√†ng, d·ªÖ hi·ªÉu. Ch·ªâ tr·∫£ v·ªÅ n·ªôi dung, kh√¥ng gi·∫£i th√≠ch th√™m."
    },
    {
      type: "mixed",
      humanContent: "ƒê√™m khuya ng·ªìi vi·∫øt nh·ªØng d√≤ng th∆°\nM·ª±c t√†n tr√™n gi·∫•y v·∫´n ch∆∞a kh√¥\nNghƒ© v·ªÅ cu·ªôc ƒë·ªùi bao ƒëi·ªÅu ngh·ªãch l√Ω\nCon ng∆∞·ªùi ta v·∫´n c·ª© m√£i mong ch·ªù",
      category: "Th∆° v·ªÅ Cu·ªôc s·ªëng",
      aiPrompt: "Vi·∫øt m·ªôt b√†i th∆° 4 c√¢u v·ªÅ vi·ªác vi·∫øt th∆° ƒë√™m khuya v√† suy ng·∫´m cu·ªôc ƒë·ªùi. Phong c√°ch ƒë∆°n gi·∫£n. Ch·ªâ tr·∫£ v·ªÅ n·ªôi dung th∆°, kh√¥ng gi·∫£i th√≠ch."
    }
  ];

  const generateAIContent = async (prompt) => {
    try {
      console.log("API Key:", import.meta.env.VITE_API_KEY ? "Exists" : "Missing");
      
      // Try gemini-2.5-flash first (newer, faster model)
      const model = genAI.getGenerativeModel({ model: "gemini-2.5-flash" });
      const result = await model.generateContent(prompt);
      const text = result.response.text();
      return text.trim();
    } catch (error) {
      console.error("Error generating AI content:", error);
      console.error("Full error:", JSON.stringify(error, null, 2));
      
      // Return fallback content based on prompt type
      if (prompt.includes("th∆°")) {
        return "M√πa thu ƒë·∫øn v·ªõi l√° v√†ng\nGi√≥ nh·∫π th·ªïi qua ƒë∆∞·ªùng ph·ªë\nNh·ªõ v·ªÅ th·ªùi gian c≈©\nL√≤ng ng∆∞·ªùi v·∫´n mong ch·ªù";
      } else if (prompt.includes("vƒÉn")) {
        return "M·ªôt c√¥ g√°i b∆∞·ªõc v√†o qu√°n. C√¥ t√¨m ch·ªó ng·ªìi. Tay c√¥ c·∫ßm cu·ªën s√°ch. Ngo√†i tr·ªùi m∆∞a. C√¥ b·∫Øt ƒë·∫ßu ƒë·ªçc.";
      } else if (prompt.includes("JavaScript")) {
        return "function fibonacci(n) {\n  if (n <= 1) return n;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n}";
      } else if (prompt.includes("√Ω nghƒ©a cu·ªôc s·ªëng")) {
        return "Con ng∆∞·ªùi c·∫ßn c√≥ m·ª•c ƒë√≠ch s·ªëng. M·ªói ng∆∞·ªùi t√¨m √Ω nghƒ©a ri√™ng. Ch√∫ng ta n√™n s·ªëng c√≥ gi√° tr·ªã.";
      } else {
        return "ƒê√™m v·ªÅ ng·ªìi vi·∫øt th∆°\nGi·∫•y b√∫t tr∆∞·ªõc m·∫∑t\nSuy ng·∫´m v·ªÅ ƒë·ªùi\nT√¨m c√¢u tr·∫£ l·ªùi";
      }
    }
  };

  // Initialize: Generate AI content for all questions and random positions
  React.useEffect(() => {
    const initializeGame = async () => {
      if (aiPositions.length === 0) {
        setLoading(true);
        
        // Generate random positions
        const positions = questions.map(() => Math.random() > 0.5);
        setAiPositions(positions);
        
        // Generate AI content for all questions
        const aiContents = await Promise.all(
          questions.map(q => generateAIContent(q.aiPrompt))
        );
        setAiGeneratedContents(aiContents);
        
        setLoading(false);
      }
    };
    
    initializeGame();
  }, []);

  const handleAnswer = (clickedRight) => {
    const aiIsOnRight = aiPositions[currentQuestion];
    
    // User clicked right side (B), check if AI is actually on right
    const correct = clickedRight === aiIsOnRight;

    if (correct) {
      setScore(score + 1);
    }

    setShowResult({ correct, aiIsOnRight });
    setTimeout(() => {
      setShowResult(false);
      if (currentQuestion < questions.length - 1) {
        setCurrentQuestion(currentQuestion + 1);
      } else {
        setGameComplete(true);
      }
    }, 3000);
  };

  if (gameComplete) {
    const percentage = Math.round((score / questions.length) * 100);
    return (
      <motion.div
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        className="text-center py-8"
      >
        {percentage >= 60 && <Confetti recycle={false} numberOfPieces={200} />}
        <h2 className="text-4xl font-bold text-neural-green mb-4">
          üé® K·∫øt Qu·∫£
        </h2>
        <div className="bg-black/60 border border-cyber-blue rounded-xl p-6 max-w-2xl mx-auto mb-6">
          <p className="text-5xl font-bold text-cyber-blue mb-4">
            {score}/{questions.length}
          </p>
          <p className="text-xl text-cream-white/80 mb-6">
            ƒê·ªô ch√≠nh x√°c: {percentage}%
          </p>
          
          <div className="bg-revolutionary-gold/10 border border-revolutionary-gold/30 rounded-lg p-5 mb-4">
            <p className="text-cream-white/90 leading-relaxed">
              {percentage >= 80 ? (
                <>
                  üåü <strong>Xu·∫•t s·∫Øc!</strong> B·∫°n c√≥ con m·∫Øt tinh t∆∞·ªùng ph√¢n bi·ªát s√°ng t·∫°o
                  c·ªßa con ng∆∞·ªùi v√† AI. R√µ r√†ng s√°ng t·∫°o nh√¢n vƒÉn c√≥ nh·ªØng d·∫•u ·∫•n ƒë·∫∑c bi·ªát!
                </>
              ) : percentage >= 60 ? (
                <>
                  üëç <strong>T·ªët!</strong> B·∫°n nh·∫≠n bi·∫øt ƒë∆∞·ª£c m·ªôt s·ªë ƒë·∫∑c ƒëi·ªÉm. AI ƒëang ng√†y
                  c√†ng ti·∫øn b·ªô nh∆∞ng v·∫´n c√≤n kho·∫£ng c√°ch v·ªõi con ng∆∞·ªùi.
                </>
              ) : (
                <>
                  ü§î <strong>AI ƒë√£ c·∫£i trang r·∫•t kh√©o!</strong> Kh√¥ng d·ªÖ ph√¢n bi·ªát ch√∫t n√†o.
                  ƒêi·ªÅu n√†y cho th·∫•y AI c√≥ th·ªÉ b·∫Øt ch∆∞·ªõc kh√° t·ªët b·ªÅ m·∫∑t c·ªßa s√°ng t·∫°o.
                </>
              )}
            </p>
          </div>

          <div className="bg-cyber-blue/10 border border-cyber-blue/30 rounded-lg p-4">
            <h3 className="text-lg font-bold text-cyber-blue mb-2">
              üí≠ C√¢u H·ªèi Suy Ng·∫´m
            </h3>
            <p className="text-sm text-cream-white/80 italic">
              {percentage < 50 
                ? '"N·∫øu con ng∆∞·ªùi kh√¥ng c√≤n ph√¢n bi·ªát n·ªïi ƒë√¢u l√† s√°ng t·∫°o c·ªßa m√¨nh, th√¨ √Ω nghƒ©a c·ªßa s·ª± s√°ng t·∫°o s·∫Ω ra sao?"'
                : '"V·∫´n c√≥ ƒëi·ªÅu g√¨ ƒë√≥ trong s√°ng t·∫°o con ng∆∞·ªùi m√† m√°y ch∆∞a ƒë·∫°t ƒë∆∞·ª£c. ƒê√≥ l√† g√¨? Tr√≠ t∆∞·ªüng t∆∞·ª£ng? C·∫£m x√∫c? √ù th·ª©c?"'
              }
            </p>
          </div>
        </div>

        <div className="bg-neural-green/10 border border-neural-green/30 rounded-xl p-5 max-w-2xl mx-auto mb-6">
          <p className="text-sm text-cream-white/90 leading-relaxed">
            <span className="text-neural-green font-bold">üßô‚Äç‚ôÇÔ∏è Tr·ª£ l√Ω Turing:</span>{" "}
            "Con ng∆∞·ªùi s√°ng t·∫°o kh√¥ng ng·ª´ng ‚Äì v√† nay c√≥ AI ƒë·ªìng h√†nh. H√£y nh·ªõ l·ªùi Marx: 
            <em className="text-revolutionary-gold"> s√°ng t·∫°o l√† bi·ªÉu hi·ªán cao qu√Ω c·ªßa b·∫£n ch·∫•t 
            con ng∆∞·ªùi c√≥ √Ω th·ª©c.</em> D√π c√¥ng ngh·ªá ti√™n ti·∫øn ƒë·∫øn ƒë√¢u, √Ω nghƒ©a v√† m·ª•c ƒë√≠ch c·ªßa 
            s√°ng t·∫°o v·∫´n n·∫±m trong tay ch√∫ng ta."
          </p>
        </div>

        <motion.button
          whileHover={{ scale: 1.05 }}
          whileTap={{ scale: 0.95 }}
          onClick={() => {
            setCurrentQuestion(0);
            setScore(0);
            setGameComplete(false);
            setAiGeneratedContents([]);
            setAiPositions([]); // Reset positions for new game
          }}
          className="bg-cyber-blue text-black px-8 py-3 rounded-lg font-bold"
        >
          Ch∆°i L·∫°i
        </motion.button>
      </motion.div>
    );
  }

  const question = questions[currentQuestion];
  const aiIsOnRight = aiPositions[currentQuestion];
  const aiGeneratedContent = aiGeneratedContents[currentQuestion];

  // Get the content for left (A) and right (B) based on AI position
  const getContentForSide = (isRightSide) => {
    // AI is always the generated content, Human is always humanContent
    if (aiIsOnRight) {
      return isRightSide ? aiGeneratedContent : question.humanContent;
    } else {
      return isRightSide ? question.humanContent : aiGeneratedContent;
    }
  };

  return (
    <div className="max-w-5xl mx-auto">
      {/* Progress */}
      <div className="mb-6">
        <div className="flex justify-between items-center mb-2">
          <span className="text-sm text-cream-white/60">
            C√¢u {currentQuestion + 1}/{questions.length}
          </span>
          <span className="text-sm text-cyber-blue font-bold">
            ƒêi·ªÉm: {score}
          </span>
        </div>
        <div className="w-full bg-steel-gray/30 rounded-full h-2">
          <motion.div
            initial={{ width: 0 }}
            animate={{ width: `${((currentQuestion + 1) / questions.length) * 100}%` }}
            className="bg-gradient-to-r from-cyber-blue to-neural-green h-2 rounded-full"
          />
        </div>
      </div>

      {/* Turing Assistant */}
      <div className="bg-neural-green/10 border border-neural-green/30 rounded-xl p-4 mb-6 flex items-start gap-3">
        <div className="text-3xl">üßô‚Äç‚ôÇÔ∏è</div>
        <div>
          <p className="text-sm font-bold text-neural-green mb-1">Tr·ª£ l√Ω Turing:</p>
          <p className="text-sm text-cream-white/80 italic">
            {question.type === "poem" && "Th∆° AI th∆∞·ªùng d√πng c·∫•u tr√∫c ƒë·ªÅu ƒë·∫∑n, thi·∫øu ch√∫t c·∫£m x√∫c s√¢u l·∫Øng..."}
            {question.type === "story" && "VƒÉn xu√¥i AI th∆∞·ªùng c√≥ c√¢u vƒÉn ƒë∆°n gi·∫£n, √≠t h√¨nh ·∫£nh ·∫©n d·ª•..."}
            {question.type === "code" && "Code AI th∆∞·ªùng l√† gi·∫£i ph√°p c∆° b·∫£n, thi·∫øu t·ªëi ∆∞u h√≥a s√°ng t·∫°o..."}
            {question.type === "philosophy" && "Tri·∫øt l√Ω AI th∆∞·ªùng li·ªát k√™, thi·∫øu chi·ªÅu s√¢u suy t∆∞..."}
            {question.type === "mixed" && "K·∫øt h·ª£p nhi·ªÅu y·∫øu t·ªë! H√£y ch√∫ √Ω ƒë·∫øn c·∫£m x√∫c v√† chi·ªÅu s√¢u..."}
          </p>
        </div>
      </div>

      <AnimatePresence mode="wait">
        {!showResult ? (
          <motion.div
            key={currentQuestion}
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -20 }}
          >
            <h3 className="text-2xl font-bold text-center text-cyber-blue mb-6">
              {question.category}: ƒê√¢u l√† s√°ng t·∫°o c·ªßa Con ng∆∞·ªùi? ü§î
            </h3>

            {loading ? (
              <div className="text-center py-20">
                <motion.div
                  animate={{ rotate: 360 }}
                  transition={{ repeat: Infinity, duration: 1, ease: "linear" }}
                  className="text-6xl mb-4 inline-block"
                >
                  ‚öôÔ∏è
                </motion.div>
                <p className="text-cream-white/80">AI ƒëang t·∫°o n·ªôi dung cho t·∫•t c·∫£ c√¢u h·ªèi...</p>
                <p className="text-cream-white/60 text-sm mt-2">ƒê·ª£i ch√∫t nh√©, ƒëang generate 5 c√¢u ü§ñ</p>
              </div>
            ) : (
              <div className="grid md:grid-cols-2 gap-6 mb-6">
                {/* Option A (Left) */}
                <motion.button
                  whileHover={{ scale: 1.02 }}
                  whileTap={{ scale: 0.98 }}
                  onClick={() => handleAnswer(false)} // false = clicked left/A
                  className="bg-gradient-to-br from-revolutionary-gold/10 to-steel-gray/20 border-2 border-revolutionary-gold/30 hover:border-revolutionary-gold rounded-xl p-6 text-left transition-all group"
                >
                  <div className="flex items-center justify-between mb-4">
                    <span className="text-2xl font-bold text-revolutionary-gold">A</span>
                    <span className="text-sm text-cream-white/60 group-hover:text-revolutionary-gold transition-colors">
                      Con ng∆∞·ªùi
                    </span>
                  </div>
                  <div className="bg-black/40 rounded-lg p-4 min-h-[150px] flex items-center">
                    <pre className="text-cream-white/90 text-sm whitespace-pre-wrap font-mono">
                      {getContentForSide(false)}
                    </pre>
                  </div>
                </motion.button>

                {/* Option B (Right) */}
                <motion.button
                  whileHover={{ scale: 1.02 }}
                  whileTap={{ scale: 0.98 }}
                  onClick={() => handleAnswer(true)} // true = clicked right/B
                  className="bg-gradient-to-br from-cyber-blue/10 to-steel-gray/20 border-2 border-cyber-blue/30 hover:border-cyber-blue rounded-xl p-6 text-left transition-all group"
                >
                  <div className="flex items-center justify-between mb-4">
                    <span className="text-2xl font-bold text-cyber-blue">B</span>
                    <span className="text-sm text-cream-white/60 group-hover:text-cyber-blue transition-colors">
                      Con ng∆∞·ªùi
                    </span>
                  </div>
                  <div className="bg-black/40 rounded-lg p-4 min-h-[150px] flex items-center">
                    <pre className="text-cream-white/90 text-sm whitespace-pre-wrap font-mono">
                      {getContentForSide(true)}
                    </pre>
                  </div>
                </motion.button>
              </div>
            )}

            <div className="text-center text-sm text-cream-white/60">
              B·∫°n c√≥ 15 gi√¢y ƒë·ªÉ quy·∫øt ƒë·ªãnh...
            </div>
          </motion.div>
        ) : (
          <motion.div
            key="result"
            initial={{ opacity: 0, scale: 0.8 }}
            animate={{ opacity: 1, scale: 1 }}
            exit={{ opacity: 0 }}
            className="text-center py-16"
          >
            <motion.div
              animate={{ scale: [1, 1.2, 1] }}
              transition={{ repeat: 2, duration: 0.5 }}
              className="text-8xl mb-6"
            >
              {showResult.correct ? "‚úÖ" : "‚ùå"}
            </motion.div>
            <p className="text-2xl text-cream-white/90 mb-4">
              {showResult.correct ? "Ch√≠nh x√°c!" : "Ch∆∞a ƒë√∫ng!"}
            </p>
            <div className="bg-black/60 border border-cyber-blue/50 rounded-xl p-6 max-w-xl mx-auto">
              <p className="text-lg text-cream-white/80">
                ƒê√°p √°n ƒë√∫ng: <strong className="text-revolutionary-gold">
                  {showResult.aiIsOnRight ? "B" : "A"}
                </strong> l√† AI
              </p>
              <p className="text-lg text-cream-white/80 mt-2">
                <strong className="text-neural-green">
                  {showResult.aiIsOnRight ? "A" : "B"}
                </strong> l√† Con ng∆∞·ªùi
              </p>
            </div>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
};

export default Game4_CreativityTest;
