/**
 * Google Apps Script ƒë·ªÉ nh·∫≠n d·ªØ li·ªáu t·ª´ Game v√† l∆∞u v√†o Google Sheet
 * 
 * H∆Ø·ªöNG D·∫™N C√ÄI ƒê·∫∂T:
 * 1. M·ªü Google Sheet c·ªßa b·∫°n
 * 2. V√†o Extensions ‚Üí Apps Script
 * 3. X√≥a code m·∫´u v√† paste code n√†y v√†o
 * 4. Nh·∫•n Save (Ctrl+S)
 * 5. Ch·ªçn function "doPost" ‚Üí Nh·∫•n Run ‚ñ∂Ô∏è ‚Üí Authorize
 * 6. Nh·∫•n Deploy ‚Üí New deployment
 * 7. Ch·ªçn type: Web app
 * 8. Execute as: Me
 * 9. Who has access: Anyone
 * 10. Deploy v√† copy URL
 * 11. Paste URL v√†o file .env (VITE_SHEET_URL)
 * 
 * C·∫§U TR√öC SHEET (D√≤ng 1 - Header):
 * A1: T√™n
 * B1: Gi√° tr·ªã Th·∫∑ng d∆∞
 * C1: Ti·ªÅn
 * D1: ƒêi·ªÉm
 * E1: Ng√†y ch∆°i
 */

function doPost(e) {
  try {
    Logger.log("üì• Nh·∫≠n request POST");
    
    // L·∫•y sheet ƒë·∫ßu ti√™n trong spreadsheet
    const sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
    
    // Parse d·ªØ li·ªáu t·ª´ request
    let data;
    if (e.postData && e.postData.contents) {
      data = JSON.parse(e.postData.contents);
      Logger.log("üìä Data nh·∫≠n ƒë∆∞·ª£c: " + JSON.stringify(data));
    } else {
      throw new Error("Kh√¥ng c√≥ d·ªØ li·ªáu trong request");
    }
    
    // Ki·ªÉm tra xem c√≥ header ch∆∞a
    const lastRow = sheet.getLastRow();
    if (lastRow === 0) {
      // Th√™m header n·∫øu sheet tr·ªëng
      sheet.appendRow(['T√™n', 'Gi√° tr·ªã Th·∫∑ng d∆∞', 'Ti·ªÅn', 'ƒêi·ªÉm', 'Ng√†y ch∆°i']);
      Logger.log("‚úÖ ƒê√£ th√™m header");
    }
    
    // Th√™m d√≤ng m·ªõi v·ªõi d·ªØ li·ªáu game
    sheet.appendRow([
      data.name || "Unknown",
      data.surplusValue || 0,
      data.money || 0,
      data.score || 0,
      data.date || new Date().toLocaleString()
    ]);
    Logger.log("‚úÖ ƒê√£ th√™m d√≤ng d·ªØ li·ªáu");
    
    // S·∫Øp x·∫øp theo ƒëi·ªÉm gi·∫£m d·∫ßn (c·ªôt D - index 4)
    if (sheet.getLastRow() > 1) {
      const dataRange = sheet.getRange(2, 1, sheet.getLastRow() - 1, 5);
      dataRange.sort({column: 4, ascending: false});
      Logger.log("‚úÖ ƒê√£ s·∫Øp x·∫øp theo ƒëi·ªÉm");
    }
    
    // Tr·∫£ v·ªÅ th√†nh c√¥ng
    return ContentService.createTextOutput(JSON.stringify({
      success: true,
      message: 'ƒê√£ l∆∞u k·∫øt qu·∫£ th√†nh c√¥ng!',
      data: data
    })).setMimeType(ContentService.MimeType.JSON);
    
  } catch (error) {
    Logger.log("‚ùå L·ªói: " + error.toString());
    
    // Tr·∫£ v·ªÅ l·ªói
    return ContentService.createTextOutput(JSON.stringify({
      success: false,
      message: 'L·ªói: ' + error.toString(),
      error: error.toString()
    })).setMimeType(ContentService.MimeType.JSON);
  }
}

function doGet(e) {
  // ƒê·ªÉ test, c√≥ th·ªÉ GET ƒë·ªÉ xem d·ªØ li·ªáu
  try {
    Logger.log("üì• Nh·∫≠n request GET");
    
    const sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
    const data = sheet.getDataRange().getValues();
    
    return ContentService.createTextOutput(JSON.stringify({
      success: true,
      message: "Apps Script ƒëang ho·∫°t ƒë·ªông!",
      rows: data.length,
      data: data,
      timestamp: new Date().toISOString()
    })).setMimeType(ContentService.MimeType.JSON);
    
  } catch (error) {
    Logger.log("‚ùå L·ªói GET: " + error.toString());
    
    return ContentService.createTextOutput(JSON.stringify({
      success: false,
      message: error.toString()
    })).setMimeType(ContentService.MimeType.JSON);
  }
}

// Test function ƒë·ªÉ ki·ªÉm tra quy·ªÅn
function testPermissions() {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
  Logger.log("‚úÖ Sheet name: " + sheet.getName());
  Logger.log("‚úÖ Last row: " + sheet.getLastRow());
  Logger.log("‚úÖ Permissions OK!");
}

